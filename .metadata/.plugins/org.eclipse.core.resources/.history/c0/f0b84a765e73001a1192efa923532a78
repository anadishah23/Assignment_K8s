package com.nagarro.nagp.microservice.aggregate.service.impl;

import java.util.Collections;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.loadbalancer.LoadBalancerClient;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.nagarro.nagp.microservice.aggregate.model.AggregateModel;
import com.nagarro.nagp.microservice.aggregate.model.OrderModel;
import com.nagarro.nagp.microservice.aggregate.model.UserModel;
import com.nagarro.nagp.microservice.aggregate.service.AggregateService;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@Service
public class DefaultAggregateServiceImpl implements AggregateService {

	
	@Resource(name = "restTemp")
	private RestTemplate restTemplate;
	
	@HystrixCommand(fallbackMethod="getfallbackDetailInfoForAggregate")
	public AggregateModel getOrderDetailsForUser(String userId) {
		// TODO Auto-generated method stub

			//String url = "/productInventory/productPrice?productCode=" + productCode;
		AggregateModel aggregateObj = new AggregateModel();
		List<OrderModel> orderForUser = null;
		UserModel user = null;
		try {
			
			String baseUserUrl = loadBalancerClient.choose("user").getUri().toString() + userId;
		//String baseUserUrl = "http://user/user/" + userId;
			user = restTemplate.getForObject(baseUserUrl, UserModel.class);
		
			
			//String baseUrl = "http://Inventory"+ url;
			String baseOrderUrl = "http://localhost:8085/order/order/user/" + userId;
			orderForUser = (List<OrderModel>) restTemplate.getForObject(baseOrderUrl, OrderModel.class);
				//productDetails = populateProductDetailsByInventory(inventory, productDetails);
			} catch (Exception ex) {
				System.out.println(ex);
			}
			
			aggregateObj.setUser(user);
			aggregateObj.setOrders(orderForUser);
			return aggregateObj;
	}

	public AggregateModel getfallbackDetailInfoForAggregate(String userId) {
		
		return getAggregateDetails(userId);
	}

	private AggregateModel getAggregateDetails(String userId) {
		// TODO Auto-generated method stub
		
		AggregateModel aggregate = new AggregateModel();
		
		aggregate.getUser().setId(userId);
		OrderModel order = new OrderModel(3,123.0,"12-03-2020",userId);
		aggregate.setOrders(Collections.singletonList(order));
		return aggregate;
	}

	
	
}
